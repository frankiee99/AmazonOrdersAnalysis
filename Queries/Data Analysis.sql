/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
select p.product_name, ROUND(SUM(o.price_per_unit * o.quantity)::numeric,2) as total_sales 
from products p
join order_items o
on p.product_id = o.product_id
GROUP BY p.product_name
order by total_sales desc 
limit 10
/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
-- cte
with cat_rev as (select c.category_name,
ROUND(SUM(o.price_per_unit * o.quantity)::numeric,2)
as total_sales
from category c
join products p
on c.category_id = p.category_id
join order_items o
on p.product_id = o.product_id
GROUP BY c.category_name)
select category_name,
total_sales,
ROUND((total_sales *100)/sum(total_sales) over(),2) as pct 
from cat_rev
order by total_sales 

-- single query

select c.category_name,
ROUND(SUM(o.price_per_unit * o.quantity)::numeric,2)
as total_sales,
ROUND(((SUM(o.price_per_unit * o.quantity)* 100)/ 
(select sum(quantity * price_per_unit) from order_items))::NUMERIC ,2)
as pct_contribution
from category c
join products p
on c.category_id = p.category_id
join order_items o
on p.product_id = o.product_id
GROUP BY c.category_name


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
with avg_order_value_table as(select c.first_name,
c.last_name, count(t.order_id) as total_orders,
ROUND(((SUM(t.price_per_unit * t.quantity))/(count(DISTINCT t.order_id)))::NUMERIC , 2) as
avg_order_value
from customers c
join
orders o
on c.customer_id = o.customer_id
join order_items t
on 
o.order_id = t.order_id
group by 1,2
)
select * from avg_order_value_table where total_orders >5
order by avg_order_value desc

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/
ALTER TABLE order_items ADD COLUMN total_price NUMERIC(10,2);
UPDATE order_items 
SET total_price = price_per_unit * quantity;

with t1 as (select 
EXTRACT(month from o.order_date) as month_name,
EXTRACT(year from o.order_date) as year_name,
SUM(oi.total_price) AS total_sales
from orders o
join 
order_items oi 
on o.order_id = oi.order_id
WHERE o.order_date BETWEEN 
    (SELECT MAX(order_date) - INTERVAL '1 year' FROM orders) 
    AND (SELECT MAX(order_date) FROM orders)
group by 1,2
order by 2,1
)
select month_name,
year_name,
total_sales,
lag(total_sales , 1) OVER(order by month_name,year_name) as total_sales_prev_mont
from t1
/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
select 
*
from customers c
left join orders o
on o.customer_id = c.customer_id
where o.customer_id is null

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/
with rank_table as

(select  co.state,
c.category_name,
sum(oi.total_price) as total_sales,
RANK() OVER(PARTITION BY co.state ORDER BY sum(oi.total_price)) as rank
from category c
join 
products p
on p.category_id = c.category_id
join order_items oi 
on oi.product_id = p.product_id
join orders o on
o.order_id = oi.order_id
join 
customers co
on co.customer_id = o.customer_id
group by 1,2
order by 1,3 desc
)
select * from rank_table where rank = 1

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

select c.first_name,
c.last_name,
p.product_name,
sum(oi.total_price) as total_value,
DENSE_RANK() Over(order by sum(oi.total_price)) AS CLTV_RANKING
from customers c
join orders o 
on o.customer_id = c.customer_id
join order_items oi 
on oi.order_id = o.order_id
join products p 
on oi.product_id = p.product_Id
group by 1,2,3
/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/
select p.product_name,
i.stock,
i.last_stock_date,
i.warehouse_id
from products p 
join inventory i 
on p.product_id = i.product_id
where stock<10

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

select o.*,
c.*,
s.shipping_date,
s.shipping_providers,
s.shipping_date - o.order_date as date_difference
from orders o 
join shippings s
on s.order_id = o.order_id
join customers c
on c.customer_id = o.order_Id
where s.shipping_date - o.order_date >3

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
    ROUND((COUNT(CASE WHEN payment_status = 'Payment Successed' THEN 1 END) * 100.0) 
    / COUNT(*), 2) AS success_percentage,
	 
    ROUND((COUNT(CASE WHEN payment_status = 'Refunded ' THEN 1 END) * 100.0) 
    / COUNT(*), 2) AS refunded_percentage,
	 
    ROUND((COUNT(CASE WHEN payment_status = 'Payment Failed' THEN 1 END) * 100.0) 
    / COUNT(*), 2) AS failed_percentage
FROM payments;




/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/
with top_sellers as 
(select 
s.seller_id,
s.seller_name,
sum(oi.total_price) as total_sales
from sellers s
join orders o 
on s.seller_id = o.seller_id
join order_items oi
on o.order_id = oi.order_id
group by 1
order by 2 desc
limit 5),
sellers_reports as
(select o.seller_id,
t.seller_name,
o.order_status,
count(*) as total_orders
from orders o 
join top_sellers t
on t.seller_id = o.seller_id
where o.order_status NOT IN ('Returned','Inprogress') 
group by 1,2,3)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
	
FROM sellers_reports
GROUP BY 1, 2
/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/
with profit_table as
(select p.product_name,
SUM(oi.total_price) AS total_sales,
ROUND(SUM(p.cogs * oi.quantity)::NUMERIC,2) as total_cogs,
ROUND((SUM(oi.total_price) - SUM(p.cogs * oi.quantity))::NUMERIC,2) as profit
from products p
join order_items oi 
on p.product_id = oi.product_id
group by p.product_name)
select * ,
ROUND((profit *100 /total_sales)::numeric,2) AS profit_margin,
DENSE_RANK() OVER (ORDER BY (profit *100 /total_sales) DESC) as rank
from profit_table
/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/
with highest_returned_products as
(select 
p.product_id,
p.product_name,
count(order_status) as orders_returned
from products p
join order_items oi 
on p.product_id = oi.product_id
join orders o
on o.order_id = oi.order_id 
where o.order_status = 'Returned'
group by 1,2
order by 3 desc
limit 10
)
select h.*,
count(o.*) as total_orders,
ROUND((h.orders_returned *100/ count(o.*)::numeric),2) as return_rate
from highest_returned_products h
join order_items oi 
on oi.product_id = h.product_id
join orders o 
on o.order_id = oi.order_id
group by 1,2,3

/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/
select o.*,
c.*
payment_status,
payment_date,
delivery_status
from orders o
join shippings s
on o.order_id = s.shipping_id
join payments p 
on p.order_id = o.order_id
join customers c 
on c.customer_id = o.customer_id
where payment_status = 'Payment Successed' and delivery_status = 'Shipped'

/*
15. Inactive Sellers
Identify sellers who havenâ€™t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers. 
*/
with inactive_sellers as
(select * from sellers 
where seller_id not in (select seller_id from orders where order_date >= (CURRENT_DATE) - INTERVAL '6 month'))
select i.*,
max(o.order_date) as last_sale_date,
sum(oi.total_price) as total_sales
from orders o
join inactive_sellers i 
on o.seller_id = i.seller_id
join order_items oi
on oi.order_id = o.order_id
group by 1,2,3
/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/
with customer_return_data as
(select 
concat(c.first_name,' ',c.last_name) as full_name,
count(o.order_id) as total_orders,
SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return
from orders o
join 
customers c
on c.customer_id = o.order_id 
group by 1)
select full_name,
 total_orders,
 total_return ,
 CASE 
 when total_return > 5 
 THEN 'Returning Customer' 
 ELSE 'New Customer'
 END as Customer_category
 from customer_return_data
/*
17. Cross-Sell Opportunities
Find customers who purchased product A but not product B (e.g., customers who bought AirPods but not AirPods Max).
Challenge: Suggest cross-sell opportunities by displaying matching product categories.
*/
select * from products
select 
concat(c.first_name, ' ',c.last_name) as full_name
from customers c
join orders o 
on c.customer_id = o.customer_id
join order_items oi 
on oi.order_id = o.order_id
join products p 
on p.product_id = oi.product_id
where p.product_name = 'Apple AirPods 3rd Gen'
AND c.customer_id NOT IN
(
select o.customer_id from orders join 
order_items oi 
on o.order_id = oi.order_id
join products p2
on oi.product_id = p2.product_id
where p2.product_name = 'Apple AirPods Max'
)
/*
18. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/
with t1 as 
(
select 
concat(first_name,' ',last_name) as full_name,
c.state,
count(o.order_id) as total_orders,
sum(total_price) as total_sales,
DENSE_RANK() OVER(PARTITION BY c.state ORDER BY count(o.order_id) DESC) AS customer_rank
from customers c
join orders o 
on o.customer_id = c.customer_id
join order_items oi 
on o.order_id = oi.order_id
group by 1,2
)
select * from t1 where customer_rank <=5
/*
19. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/
select s.shipping_providers,
SUM(total_price) as total_sales,
count(o.order_id) as total_orders,
ROUND(AVG(s.shipping_date - o.order_date)::NUMERIC,0) as average_delivery_time
from shippings s
join order_items oi 
on oi.order_id = s.order_id
join orders o
on o.order_id = oi.order_id
group by 1
order by 2 desc

/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/
WITH last_year_sale
as
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_price) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY 1, 2
),

current_year_sale
AS
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_price) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1, 2
)

SELECT
	cs.product_id,
	ls.revenue as last_year_revenue,
	cs.revenue as current_year_revenue,
	ls.revenue - cs.revenue as rev_diff,
	ROUND((cs.revenue - ls.revenue)::numeric/ls.revenue::numeric * 100, 2) as reveneue_dec_ratio
FROM last_year_sale as ls
JOIN
current_year_sale as cs
ON ls.product_id = cs.product_id
WHERE 
	ls.revenue > cs.revenue
ORDER BY 5 DESC
LIMIT 10




/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/

CREATE OR REPLACE PROCEDURE add_sales
(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)
LANGUAGE plpgsql
AS $$

DECLARE 
-- all variable
v_count INT;
v_price FLOAT;
v_product VARCHAR(50);

BEGIN
-- Fetching product name and price based p id entered
	SELECT 
		price, product_name
		INTO
		v_price, v_product
	FROM products
	WHERE product_id = p_product_id;
	
-- checking stock and product availability in inventory	
	SELECT 
		COUNT(*) 
		INTO
		v_count
	FROM inventory
	WHERE 
		product_id = p_product_id
		AND 
		stock >= p_quantity;
		
	IF v_count > 0 THEN
	-- add into orders and order_items table
	-- update inventory
		INSERT INTO orders(order_id, order_date, customer_id, seller_id)
		VALUES
		(p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);

		-- adding into order list
		INSERT INTO order_items(order_item_id, order_id, product_id, quantity, price_per_unit, total_sale)
		VALUES
		(p_order_item_id, p_order_id, p_product_id, p_quantity, v_price, v_price*p_quantity);

		--updating inventory
		UPDATE inventory
		SET stock = stock - p_quantity
		WHERE product_id = p_product_id;
		
		RAISE NOTICE 'Thank you product: % sale has been added also inventory stock updates',v_product; 

	ELSE
		RAISE NOTICE 'Thank you for for your info the product: % is not available', v_product;

	END IF;


END;
$$



SELECT COUNT(*) 
FROM inventory
WHERE 
	product_id = 1
	AND 
	stock >= 56



call add_sales
(
25005, 2, 5, 25004, 1, 14
);


(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)